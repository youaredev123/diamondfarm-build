{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","utils/translateTextHelpers.ts","hooks/useI18n.ts","components/layout/Page.tsx","components/layout/Container.tsx","utils/multicall.ts","contexts/BlockContext.tsx","config/constants/types.ts","utils/addressHelpers.ts","config/constants/pools.ts","config/constants/contracts.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","config/constants/nfts.ts","views/Nft/components/NftGlobalNotification.tsx","App.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts","contexts/Localisation/translationsContext.ts"],"names":["fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","masterchefABI","pid","info","totalAllocPoint","kawaiiPerBlock","totalStakedAmount","tokenAmount","tokenSymbol","BigNumber","div","pow","tokenPriceVsQuote","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","withdrawFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useFarmFromPid","useFarmUser","usePriceBnbBusd","usePriceCakeBusd","bnbPriceUSD","console","log","Number","useTotalValue","bnbPrice","cakePrice","value","i","length","val","BNB","KAWAII","plus","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","useContext","fastRefresh","variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","translation","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","TranslationsContext","Page","styled","Container","theme","mediaQueries","sm","lg","abi","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","PoolCategory","getCakeAddress","addresses","kawaii","chainId","masterChef","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","pools","cake","56","97","busd","usdc","usdt","dai","nonBnbPools","poolsConfig","filter","p","stakingTokenName","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingDIAM","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","contracts","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","setTranslations","storedLangCode","localStorage","getItem","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","useTheme","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","RABBIT_MINTING_FARM_ADDRESS","ModalContent","Actions","NftYouWonModal","onDismiss","TranslateString","title","src","alt","style","height","marginBottom","size","color","as","NftGlobalNotification","useModal","onPresentBurnModal","showModal","checkNftStatus","rabbitmintingfarm","totalSupplyDistributedArr","currentDistributedSupplyArr","canClaimArr","hasClaimedArr","totalSupplyDistributed","currentDistributedSupply","canClaim","hasClaimed","lt","document","location","Home","lazy","Farms","Lottery","Ifos","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","path","exact","tokenMode","component","memo","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions","defaultTranslationState"],"mappings":"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","file":"static/js/main.867d0817.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals\r\n      ] = await multicall(erc20, calls)\r\n      \r\n      const [info, totalAllocPoint, kawaiiPerBlock, totalStakedAmount] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'rewardPerBlock',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalStakedAmount',\r\n        },\r\n      ])\r\n      \r\n      let tokenAmount;\r\n      let lpTotalInQuoteToken;\r\n      let tokenPriceVsQuote;\r\n      let quoteTokenAmount;\r\n      \r\n      if(farmConfig.isTokenOnly){\r\n        if (farmConfig.tokenSymbol === 'DIAM')\r\n          tokenAmount = new BigNumber(totalStakedAmount).div(new BigNumber(10).pow(tokenDecimals));\r\n        else\r\n          tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\r\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\r\n          tokenPriceVsQuote = new BigNumber(1);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n      }else{\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(18))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if(tokenAmount.comparedTo(0) > 0){\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n      }\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount.toJSON(),\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        withdrawFeeBP: info.withdrawFeeBP,\r\n        kawaiiPerBlock: new BigNumber(kawaiiPerBlock).toNumber(),\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n","import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchFarmUserAllowances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string) => {\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'pendingDIAM',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport fetchFarms from './fetchFarms'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n  const farms = await fetchFarms()\r\n  dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n  \r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],      \r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n","import BigNumber from 'bignumber.js'\r\nimport { useEffect, useMemo } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\r\nimport { State, Farm, Pool } from './types'\r\nimport { QuoteToken } from '../config/constants/types'\r\n\r\nconst ZERO = new BigNumber(0)\r\n\r\nexport const useFetchPublicData = () => {\r\n  const dispatch = useDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n    // dispatch(fetchPoolsPublicDataAsync())\r\n  }, [dispatch, slowRefresh])\r\n}\r\n\r\n// Farms\r\n\r\nexport const useFarms = (): Farm[] => {\r\n  const farms = useSelector((state: State) => state.farms.data)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\r\n  }\r\n}\r\n\r\n\r\n// Pools\r\n\r\nexport const usePools = (account): Pool[] => {\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useDispatch()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchPoolsUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const pools = useSelector((state: State) => state.pools.data)\r\n  return pools\r\n}\r\n\r\nexport const usePoolFromPid = (sousId): Pool => {\r\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\r\n  return pool\r\n}\r\n\r\n// Prices\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const pid = 2 // BUSD-BNB LP\r\n  const farm = useFarmFromPid(pid)\r\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  const pid = 1 // CAKE-BNB LP\r\n  const bnbPriceUSD = usePriceBnbBusd()\r\n  const farm = useFarmFromPid(pid)\r\n  console.log(\"hms------>\", Number(bnbPriceUSD), Number(farm.tokenPriceVsQuote))\r\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\r\n  return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\r\n  // const pid = 1; // EGG-BUSD LP\r\n  // const farm = useFarmFromPid(pid);\r\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms();\r\n  const bnbPrice = usePriceBnbBusd();\r\n  const cakePrice = usePriceCakeBusd();\r\n  let value = new BigNumber(0);\r\n  for (let i = 0; i < farms.length; i++) {\r\n    const farm = farms[i]\r\n    if (farm.lpTotalInQuoteToken) {\r\n      let val;\r\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\r\n      }else if (farm.quoteTokenSymbol === QuoteToken.KAWAII) {\r\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\r\n      }else{\r\n        val = (farm.lpTotalInQuoteToken);\r\n      }\r\n      value = value.plus(val);\r\n\r\n    }\r\n  }\r\n  return value;\r\n}","import random from 'lodash/random'\r\n\r\n// Array of available nodes to connect to\r\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\r\n\r\nconst getNodeUrl = () => {\r\n  const randomIndex = random(0, nodes.length - 1)\r\n  return nodes[randomIndex]\r\n}\r\n\r\nexport default getNodeUrl\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst FAST_INTERVAL = 10000\r\nconst SLOW_INTERVAL = 60000\r\n\r\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\r\n\r\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\r\nconst RefreshContextProvider = ({ children }) => {\r\n  const [slow, setSlow] = useState(0)\r\n  const [fast, setFast] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setFast((prev) => prev + 1)\r\n    }, FAST_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      setSlow((prev) => prev + 1)\r\n    }, SLOW_INTERVAL)\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\r\n}\r\n\r\nexport { RefreshContext, RefreshContextProvider }\r\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\r\nexport {\r\n  fetchPoolsPublicDataAsync,\r\n  fetchPoolsUserDataAsync,\r\n  updateUserAllowance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n  updateUserStakedBalance,\r\n} from './pools'\r\n","import { useContext } from 'react'\r\nimport { RefreshContext } from 'contexts/RefreshContext'\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default useRefresh\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\n\r\nconst variableRegex = /%(.*?)%/\r\n\r\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\r\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\r\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\r\n  const fallbackValueAtIndex = fallback.split(' ')[0]\r\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\r\n}\r\n\r\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\r\n  const foundTranslation = translations.find((translation) => {\r\n    return translation.data.stringId === translationId\r\n  })\r\n  if (foundTranslation) {\r\n    const translatedString = foundTranslation.data.text\r\n    const includesVariable = translatedString.includes('%')\r\n    if (includesVariable) {\r\n      return replaceDynamicString(translatedString, fallback)\r\n    }\r\n    return translatedString\r\n  }\r\n  return fallback\r\n}\r\n\r\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\r\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\r\n// @see https://reactjs.org/docs/hooks-rules.html\r\nexport const TranslateString = (translationId: number, fallback: string) => {\r\n  const { translations } = useContext(TranslationsContext)\r\n  if (translations[0] === 'error') {\r\n    return fallback\r\n  }\r\n  if (translations.length > 0) {\r\n    return getTranslation(translations, translationId, fallback)\r\n  }\r\n  return fallback\r\n}\r\n","import { useContext } from 'react'\r\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\r\nimport { getTranslation } from '../utils/translateTextHelpers'\r\n\r\nconst useI18n = () => {\r\n  const { translations } = useContext(TranslationsContext)\r\n\r\n  return (translationId: number, fallback: string) => {\r\n    if (translations[0] === 'error') {\r\n      return fallback\r\n    }\r\n    if (translations.length > 0) {\r\n      return getTranslation(translations, translationId, fallback)\r\n    }\r\n    return fallback\r\n  }\r\n}\r\n\r\nexport default useI18n\r\n","import styled from 'styled-components'\r\nimport Container from './Container'\r\n\r\nconst Page = styled(Container)`\r\n  min-height: calc(100vh - 64px);\r\n  padding-top: 16px;\r\n  padding-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-top: 24px;\r\n    padding-bottom: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-top: 32px;\r\n    padding-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default Page\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 992px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nexport default Container\r\n","import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (exemple: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { getWeb3 } from 'utils/web3'\r\n\r\nconst BlockContext = React.createContext(0)\r\n\r\nconst BlockContextProvider = ({ children }) => {\r\n  const previousBlock = useRef(0)\r\n  const [block, setBlock] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const web3 = getWeb3()\r\n    const interval = setInterval(async () => {\r\n      const blockNumber = await web3.eth.getBlockNumber()\r\n      if (blockNumber !== previousBlock.current) {\r\n        previousBlock.current = blockNumber\r\n        setBlock(blockNumber)\r\n      }\r\n    }, 6000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [])\r\n\r\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\r\n}\r\n\r\nexport { BlockContext, BlockContextProvider }\r\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\r\n\r\nexport interface Ifo {\r\n  id: string\r\n  isActive: boolean\r\n  address: string\r\n  name: string\r\n  subTitle?: string\r\n  description?: string\r\n  minConstribution: string\r\n  maxConstribution: string\r\n  currency: string\r\n  currencyAddress: string\r\n  tokenDecimals: number\r\n}\r\n\r\nexport enum QuoteToken {\r\n  'BNB' = 'BNB',\r\n  'CAKE' = 'CAKE',\r\n  'SYRUP' = 'SYRUP',\r\n  'BUSD' = 'BUSD',\r\n  'TWT' = 'TWT',\r\n  'UST' = 'UST',\r\n  'KAWAII' = 'KAWAII',\r\n  'USDC' = 'USDC',\r\n  'USDT' = 'USDT',\r\n  'DAI' = 'DAI',\r\n  'ETH' = 'ETH',\r\n}\r\n\r\nexport enum PoolCategory {\r\n  'COMMUNITY' = 'Community',\r\n  'CORE' = 'Core',\r\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\r\n}\r\n\r\nexport interface Address {\r\n  97?: string\r\n  56: string\r\n}\r\n\r\nexport interface FarmConfig {\r\n  pid: number\r\n  lpSymbol: string\r\n  lpAddresses: Address\r\n  tokenSymbol: string\r\n  tokenAddresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  quoteTokenAdresses: Address\r\n  multiplier?: string\r\n  isTokenOnly?: boolean\r\n  isCommunity?: boolean\r\n  risk: number\r\n  dual?: {\r\n    rewardPerBlock: number\r\n    earnLabel: string\r\n    endBlock: number\r\n  }\r\n}\r\n\r\nexport interface PoolConfig {\r\n  sousId: number\r\n  image?: string\r\n  tokenName: string\r\n  stakingTokenName: QuoteToken\r\n  stakingLimit?: number\r\n  stakingTokenAddress?: string\r\n  contractAddress: Address\r\n  poolCategory: PoolCategory\r\n  projectLink: string\r\n  tokenPerBlock: string\r\n  sortOrder?: number\r\n  harvest?: boolean\r\n  isFinished?: boolean\r\n  tokenDecimals: number\r\n}\r\n\r\nexport type Nft = {\r\n  name: string\r\n  description: string\r\n  originalImage: string\r\n  previewImage: string\r\n  blurImage: string\r\n  sortOrder: number\r\n  bunnyId: number\r\n}\r\n","import addresses from 'config/constants/contracts'\r\n\r\nconst chainId = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const getCakeAddress = () => {\r\n  return addresses.kawaii[chainId]\r\n}\r\nexport const getMasterChefAddress = () => {\r\n  return addresses.masterChef[chainId]\r\n}\r\nexport const getMulticallAddress = () => {\r\n  return addresses.mulltiCall[chainId]\r\n}\r\nexport const getWbnbAddress = () => {\r\n  return addresses.wbnb[chainId]\r\n}\r\nexport const getLotteryAddress = () => {\r\n  return addresses.lottery[chainId]\r\n}\r\nexport const getLotteryTicketAddress = () => {\r\n  return addresses.lotteryNFT[chainId]\r\n}\r\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\r\n\r\nconst pools: PoolConfig[] = [\r\n  // {\r\n  //   sousId: 0,\r\n  //   tokenName: 'CAKE',\r\n  //   stakingTokenName: QuoteToken.CAKE,\r\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n  //   contractAddress: {\r\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\r\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://pancakeswap.finance/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '10',\r\n  //   sortOrder: 1,\r\n  //   isFinished: false,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n  // {\r\n  //   sousId: 1,\r\n  //   tokenName: 'TWT',\r\n  //   stakingTokenName: QuoteToken.SYRUP,\r\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\r\n  //   contractAddress: {\r\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\r\n  //   },\r\n  //   poolCategory: PoolCategory.CORE,\r\n  //   projectLink: 'https://trustwallet.com/',\r\n  //   harvest: true,\r\n  //   tokenPerBlock: '20',\r\n  //   sortOrder: 999,\r\n  //   isFinished: true,\r\n  //   tokenDecimals: 18,\r\n  // },\r\n]\r\n\r\nexport default pools\r\n","export default {\r\n  cake: {\r\n    56: '0x08bc8a2f18a9169988654e82cbdd00e757520b84',\r\n    97: '',\r\n  },\r\n  kawaii: {\r\n    56: '0x08bc8a2f18a9169988654e82cbdd00e757520b84',\r\n    97: '',\r\n  },\r\n  masterChef: {\r\n    56: '0xCa886f2ccDd443595Ef74Fd9CFfAE5E28a97EB66',\r\n    97: '',\r\n  },\r\n  wbnb: {\r\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    97: '',\r\n  },\r\n  lottery: {\r\n    56: '0x368BE64a91Db1D05085f7cE997594d7C70449A89',\r\n    97: '',\r\n  },\r\n  lotteryNFT: {\r\n    56: '0xE7a79963396ed9c7DaF0B2fCbbdBfAECc581A7Ba',\r\n    97: '',\r\n  },\r\n  mulltiCall: {\r\n    56: '0xE0efA311729d4374Ce9545da6ba18BB587bf934B',\r\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\r\n  },\r\n  busd: {\r\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n    97: '',\r\n  },\r\n  usdc: {\r\n    56: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\r\n    97: '',\r\n  },\r\n  usdt: {\r\n    56: '0x55d398326f99059ff775485246999027b3197955',\r\n    97: '',\r\n  },\r\n  dai: {\r\n    56: '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3',\r\n    97: '',\r\n  },\r\n  eth: {\r\n    56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\r\n    97: '',\r\n  },\r\n}\r\n","import { AbiItem } from 'web3-utils'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\r\nconst web3 = getWeb3()\r\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress,\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'userInfo',\r\n    params: [account],\r\n  }))\r\n  const userInfo = await multicall(sousChefABI, calls)\r\n  const stakedBalances = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\r\n\r\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const calls = nonMasterPools.map((p) => ({\r\n    address: p.contractAddress[CHAIN_ID],\r\n    name: 'pendingReward',\r\n    params: [account],\r\n  }))\r\n  const res = await multicall(sousChefABI, calls)\r\n  const pendingRewards = nonMasterPools.reduce(\r\n    (acc, pool, index) => ({\r\n      ...acc,\r\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n    }),\r\n    {},\r\n  )\r\n\r\n  // Cake / Cake pool\r\n  const pendingReward = await masterChefContract.methods.pendingDIAM('0', account).call()\r\n\r\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\r\n}\r\n","/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStatking()\r\n\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n","import contracts from './contracts'\r\nimport { FarmConfig, QuoteToken } from './types'\r\n\r\nconst farms: FarmConfig[] = [\r\n  {\r\n    pid: 0,\r\n    risk: 5,\r\n    isTokenOnly: true,\r\n    lpSymbol: 'DIAM',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x71a65164431975CFAaD52992f27Dd5A37e56C574',\r\n    },\r\n    tokenSymbol: 'DIAM',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x08bc8a2f18a9169988654e82cbdd00e757520b84',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 1,\r\n    risk: 0,\r\n    lpSymbol: 'DIAM-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x71a65164431975CFAaD52992f27Dd5A37e56C574',\r\n    },\r\n    tokenSymbol: 'DIAM',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x08bc8a2f18a9169988654e82cbdd00e757520b84',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BNB,\r\n    quoteTokenAdresses: contracts.wbnb,\r\n  },\r\n  {\r\n    pid: 3,\r\n    risk: 5,\r\n    lpSymbol: 'DIAM-BUSD LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x36Ded0Ca74b8950Aa42e5B9876FD65dFCCe15D58',\r\n    },\r\n    tokenSymbol: 'DIAM',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0x08bc8a2f18a9169988654e82cbdd00e757520b84',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  // {\r\n  //   pid: 19,\r\n  //   risk: 5,\r\n  //   lpSymbol: 'DIAM-USDT LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x0E0a9b453197e70B56EF510f3CC13DF92aAC65d2',\r\n  //   },\r\n  //   tokenSymbol: 'DIAM',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x08bc8a2f18a9169988654e82cbdd00e757520b84',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.USDT,\r\n  //   quoteTokenAdresses: contracts.usdt,\r\n  // },\r\n  {\r\n    pid: 2,\r\n    risk: 5,\r\n    lpSymbol: 'BUSD-BNB LP',\r\n    lpAddresses: {\r\n      97: '',\r\n      56: '0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16',\r\n    },\r\n    tokenSymbol: 'BNB',\r\n    tokenAddresses: {\r\n      97: '',\r\n      56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n    },\r\n    quoteTokenSymbol: QuoteToken.BUSD,\r\n    quoteTokenAdresses: contracts.busd,\r\n  },\r\n  // {\r\n  //   pid: 4,\r\n  //   risk: 5,\r\n  //   lpSymbol: 'ETH-BNB LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x74E4716E431f45807DCF19f284c7aA99F18a4fbc',\r\n  //   },\r\n  //   tokenSymbol: 'ETH',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BNB,\r\n  //   quoteTokenAdresses: contracts.wbnb,\r\n  // },\r\n  // {\r\n  //   pid: 5,\r\n  //   risk: 5,\r\n  //   lpSymbol: 'DOGE-BNB LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0xac109C8025F272414fd9e2faA805a583708A017f', \r\n  //   },\r\n  //   tokenSymbol: 'DOGE',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0xba2ae424d960c26247dd6c32edc70b295c744c43',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BNB,\r\n  //   quoteTokenAdresses: contracts.wbnb,\r\n  // },\r\n  // {\r\n  //   pid: 6,\r\n  //   risk: 5,\r\n  //   lpSymbol: 'BUSD-USDT LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x7EFaEf62fDdCCa950418312c6C91Aef321375A00', \r\n  //   },\r\n  //   tokenSymbol: 'BUSD',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.USDT,\r\n  //   quoteTokenAdresses: contracts.usdt,\r\n  // },\r\n  // {\r\n  //   pid: 7,\r\n  //   risk: 5,\r\n  //   lpSymbol: 'CAKE-BNB LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x0eD7e52944161450477ee417DE9Cd3a859b14fD0', \r\n  //   },\r\n  //   tokenSymbol: 'CAKE',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BNB,\r\n  //   quoteTokenAdresses: contracts.wbnb,\r\n  // },\r\n  // {\r\n  //   pid: 8,\r\n  //   risk: 5,\r\n  //   lpSymbol: 'BTCB-BUSD LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0xF45cd219aEF8618A92BAa7aD848364a158a24F33', \r\n  //   },\r\n  //   tokenSymbol: 'BTCB',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 9,\r\n  //   risk: 5,\r\n  //   lpSymbol: 'ETH-USDT LP',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x531FEbfeb9a61D948c384ACFBe6dCc51057AEa7e', \r\n  //   },\r\n  //   tokenSymbol: 'ETH',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.USDT,\r\n  //   quoteTokenAdresses: contracts.usdt,\r\n  // },\r\n  // {\r\n  //   pid: 10,\r\n  //   risk: 5,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'WBNB',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16',\r\n  //   },\r\n  //   tokenSymbol: 'WBNB',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 11,\r\n  //   risk: 5,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'ETH',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x7213a321F1855CF1779f42c0CD85d3D95291D34C',\r\n  //   },\r\n  //   tokenSymbol: 'ETH',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 12,\r\n  //   risk: 5,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'BTCB',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0xF45cd219aEF8618A92BAa7aD848364a158a24F33',\r\n  //   },\r\n  //   tokenSymbol: 'BTCB',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 13,\r\n  //   risk: 5,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'CAKE',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x804678fa97d91B974ec2af3c843270886528a9E6',\r\n  //   },\r\n  //   tokenSymbol: 'CAKE',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 14,\r\n  //   risk: 5,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'DOT',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x9fDaaB9312084298d210B8789629D3054230e998',\r\n  //   },\r\n  //   tokenSymbol: 'DOT',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 15,\r\n  //   risk: 5,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'ADA',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x1E249DF2F58cBef7EAc2b0EE35964ED8311D5623',\r\n  //   },\r\n  //   tokenSymbol: 'ADA',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0x3ee2200efb3400fabb9aacf31297cbdd1d435d47',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 16,\r\n  //   risk: 5,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'DOGE',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0xE27859308ae2424506D1ac7BF5bcb92D6a73e211',\r\n  //   },\r\n  //   tokenSymbol: 'DOGE',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0xba2ae424d960c26247dd6c32edc70b295c744c43',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 17,\r\n  //   risk: 5,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'GARUDA',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x854086dc841e1bfae50cb615bf41f55bf432a90b',\r\n  //   },\r\n  //   tokenSymbol: 'GARUDA',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0xF138090A6BAeb5f846Dd71cF191b3CbC0140bA97',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n  // {\r\n  //   pid: 18,\r\n  //   risk: 5,\r\n  //   isTokenOnly: true,\r\n  //   lpSymbol: 'ATA',\r\n  //   lpAddresses: {\r\n  //     97: '',\r\n  //     56: '0x7265A3A91A05BBFb47D7F199f4079979696B8d65',\r\n  //   },\r\n  //   tokenSymbol: 'ATA',\r\n  //   tokenAddresses: {\r\n  //     97: '',\r\n  //     56: '0xa2120b9e674d3fc3875f415a7df52e382f141225',\r\n  //   },\r\n  //   quoteTokenSymbol: QuoteToken.BUSD,\r\n  //   quoteTokenAdresses: contracts.busd,\r\n  // },\r\n]\r\n\r\nexport default farms\r\n","import { createGlobalStyle } from 'styled-components'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\r\n\r\ndeclare module 'styled-components' {\r\n  /* eslint-disable @typescript-eslint/no-empty-interface */\r\n  export interface DefaultTheme extends PancakeTheme {}\r\n}\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    font-family: 'Kanit', sans-serif;\r\n  }\r\n  body {\r\n    background-color: ${({ theme }) => theme.colors.background};\r\n\r\n    img {\r\n      height: auto;\r\n      max-width: 100%;\r\n    }\r\n  }\r\n  .responsive-bottom-image{\r\n    display: flex;\r\n  }\r\n  .responsive-bottom-image img{\r\n    margin: auto;\r\n  }\r\n`\r\n\r\nexport default GlobalStyle\r\n","export const EN = { code: 'en', language: 'English' }\r\nexport const AR = { code: 'ar', language: 'العربية' }\r\nexport const CA = { code: 'ca', language: 'Català' }\r\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\r\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\r\nexport const CS = { code: 'cs', language: 'Čeština' }\r\nexport const DA = { code: 'da', language: 'Dansk' }\r\nexport const DE = { code: 'de', language: 'Deutsch' }\r\nexport const NL = { code: 'nl', language: 'Nederlands' }\r\nexport const FIL = { code: 'fil', language: 'Filipino' }\r\nexport const FI = { code: 'fi', language: 'Suomalainen' }\r\nexport const FR = { code: 'fr', language: 'Français' }\r\nexport const EL = { code: 'el', language: 'Ελληνικά' }\r\nexport const HI = { code: 'hi', language: 'हिंदी' }\r\nexport const HU = { code: 'hu', language: 'Magyar' }\r\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\r\nexport const IT = { code: 'it', language: 'Italiano' }\r\nexport const JA = { code: 'ja', language: '日本語' }\r\nexport const KO = { code: 'ko', language: '한국어' }\r\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\r\nexport const RO = { code: 'ro', language: 'Română' }\r\nexport const RU = { code: 'ru', language: 'Русский' }\r\nexport const SR = { code: 'sr', language: 'Српски' }\r\nexport const ESES = { code: 'es-ES', language: 'Español' }\r\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\r\nexport const TA = { code: 'ta', language: 'தமிழ்' }\r\nexport const TR = { code: 'tr', language: 'Türkçe' }\r\nexport const UK = { code: 'uk', language: 'Українська' }\r\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\r\n\r\nexport const allLanguages = [\r\n  EN,\r\n  // AR,\r\n  // CA,\r\n  // ZHCN,\r\n  // ZHTW,\r\n  // CS,\r\n  // DA,\r\n  // DE,\r\n  // NL,\r\n  // FIL,\r\n  // FI,\r\n  // FR,\r\n  // EL,\r\n  // HI,\r\n  // HU,\r\n  // ID,\r\n  // IT,\r\n  // JA,\r\n  // KO,\r\n  // PTBR,\r\n  // RO,\r\n  // RU,\r\n  // SR,\r\n  // ESES,\r\n  // SVSE,\r\n  // TA,\r\n  // TR,\r\n  // UK,\r\n  // VI,\r\n]\r\n","import React, { useState, useEffect } from 'react'\r\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\r\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\r\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\r\n\r\nconst CACHE_KEY = 'pancakeSwapLanguage'\r\n\r\nexport interface LangType {\r\n  code: string\r\n  language: string\r\n}\r\n\r\nexport interface LanguageState {\r\n  selectedLanguage: LangType\r\n  setSelectedLanguage: (langObject: LangType) => void\r\n  translatedLanguage: LangType\r\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\r\n}\r\n\r\nconst LanguageContext = React.createContext({\r\n  selectedLanguage: EN,\r\n  setSelectedLanguage: () => undefined,\r\n  translatedLanguage: EN,\r\n  setTranslatedLanguage: () => undefined,\r\n} as LanguageState)\r\n\r\nconst fileId = 8\r\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\r\nconst stringTranslationsApi = new StringTranslations({\r\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\r\n})\r\n\r\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\r\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\r\n}\r\n\r\nconst LanguageContextProvider = ({ children }) => {\r\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\r\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\r\n  const [translations, setTranslations] = useState<Array<any>>([])\r\n\r\n  const getStoredLang = (storedLangCode: string) => {\r\n    return allLanguages.filter((language) => {\r\n      return language.code === storedLangCode\r\n    })[0]\r\n  }\r\n\r\n  useEffect(() => {\r\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\r\n    if (storedLangCode) {\r\n      const storedLang = getStoredLang(storedLangCode)\r\n      setSelectedLanguage(storedLang)\r\n    } else {\r\n      setSelectedLanguage(EN)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (selectedLanguage) {\r\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\r\n      fetch(`./i18n/${selectedLanguage.code}.json`)\r\n        .then(r=>r.json())\r\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\r\n        .then((translationApiResponse) => {\r\n          if (translationApiResponse.data.length < 1) {\r\n            setTranslations(['error'])\r\n          } else {\r\n            setTranslations(translationApiResponse.data)\r\n          }\r\n        })\r\n        .then(() => setTranslatedLanguage(selectedLanguage))\r\n        .catch((e) => {\r\n          // console.error(\"ERROR\");\r\n          // console.error(e);\r\n          setTranslations(['error'])\r\n        })\r\n    }\r\n  }, [selectedLanguage, setTranslations])\r\n\r\n  const handleLanguageSelect = (langObject: LangType) => {\r\n    setSelectedLanguage(langObject)\r\n    localStorage.setItem(CACHE_KEY, langObject.code)\r\n  }\r\n\r\n  return (\r\n    <LanguageContext.Provider\r\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\r\n    >\r\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\r\n    </LanguageContext.Provider>\r\n  )\r\n}\r\n\r\nexport { LanguageContext, LanguageContextProvider }\r\n","import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@pancakeswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? dark : dark}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n","import { useContext } from 'react'\r\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\r\nimport { ThemeContext } from 'contexts/ThemeContext'\r\n\r\nconst useTheme = () => {\r\n  const { isDark, toggleTheme } = useContext(ThemeContext)\r\n  const theme = useContext(StyledThemeCopntext)\r\n  return { isDark, toggleTheme, theme }\r\n}\r\n\r\nexport default useTheme\r\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\r\n\r\nconst config: MenuEntry[] = [\r\n  {\r\n    label: 'Home',\r\n    icon: 'HomeIcon',\r\n    href: '/',\r\n  },\r\n  {\r\n    label: 'Trade',\r\n    icon: 'TradeIcon',\r\n    items: [\r\n      {\r\n        label: 'Exchange',\r\n        href: 'https://dex.diamond.amblade.me/#/swap',\r\n      },\r\n      {\r\n        label: 'Liquidity',\r\n        href: 'https://dex.diamond.amblade.me/#/pool',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    label: 'Farms',\r\n    icon: 'FarmIcon',\r\n    href: '/farms',\r\n  },\r\n  {\r\n    label: 'Pools',\r\n    icon: 'PoolIcon',\r\n    href: '/pools',\r\n  },\r\n  // {\r\n  //   label: 'Presale',\r\n  //   icon: 'NftIcon',\r\n  //   href: '/presale',\r\n  // },\r\n  // {\r\n  //   label: 'Lottery',\r\n  //   icon: 'TicketIcon',\r\n  //   href: '/lottery',\r\n  // },\r\n  // {\r\n  //   label: 'Info',\r\n  //   icon: 'InfoIcon',\r\n  //   items: [\r\n  //     {\r\n  //       label: 'PancakeSwap',\r\n  //       href: 'https://pancakeswap.info/token/0x65dc57A9e458211774c82cfFeB70f83939742A59',\r\n  //     },\r\n  //   ],\r\n  // },\r\n  // {\r\n  //   label: 'More',\r\n  //   icon: 'MoreIcon',\r\n  //   items: [\r\n  //     {\r\n  //       label: \"Whitepaper\",\r\n  //       href: \"http://diamond.finance/uploads/Whitepaper.pdf\",\r\n  //     },\r\n  //     {\r\n  //       label: \"Executive Summary\",\r\n  //       href: \"http://diamond.finance/uploads/ExecutiveSummary.pdf\",\r\n  //     },\r\n  //     {\r\n  //       label: \"Diamond Presentation\",\r\n  //       href: \"http://diamond.finance/uploads/ProjectPresentation.pdf\",\r\n  //     },\r\n  //     // {\r\n  //     //   label: \"Github\",\r\n  //     //   href: \"https://github.com/\",\r\n  //     // },\r\n  //     // {\r\n  //     //   label: 'CoinGecko',\r\n  //     //   href: 'https://www.coingecko.com/en/',\r\n  //     // },\r\n  //     // {\r\n  //     //   label: 'CoinMarketCap',\r\n  //     //   href: 'https://coinmarketcap.com/currencies/',\r\n  //     // },\r\n  //   ],\r\n  // },\r\n\r\n]\r\n\r\nexport default config\r\n","import React, { useContext } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { allLanguages } from 'config/localisation/languageCodes'\r\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\r\nimport config from './config'\r\n\r\nconst Menu = (props) => {\r\n  const { account, connect, reset } = useWallet()\r\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\r\n  const { isDark, toggleTheme } = useTheme()\r\n  const cakePriceUsd = usePriceCakeBusd()\r\n\r\n  return (\r\n    <UikitMenu\r\n      account={account}\r\n      login={connect}\r\n      logout={reset}\r\n      isDark={isDark}\r\n      toggleTheme={toggleTheme}\r\n      currentLang={selectedLanguage && selectedLanguage.code}\r\n      langs={allLanguages}\r\n      setLang={setSelectedLanguage}\r\n      cakePriceUsd={cakePriceUsd.toNumber()}\r\n      links={config}\r\n      priceLink=\"https://bscscan.com/token/0x08bc8a2f18a9169988654e82cbdd00e757520b84\"\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Spinner } from '@pancakeswap-libs/uikit'\r\nimport Page from './layout/Page'\r\n\r\nconst Wrapper = styled(Page)`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\n\r\nconst PageLoader: React.FC = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Spinner />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PageLoader\r\n","import { Nft } from './types'\r\n\r\nexport const RABBIT_MINTING_FARM_ADDRESS = '0x7c8b60d2b859a38c8B9b5B6CB4565485cb637c7a'\r\nexport const PANCAKE_RABBITS_ADDRESS = '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07'\r\n\r\nconst Nfts: Nft[] = [\r\n  {\r\n    name: 'Swapsies',\r\n    description: 'These bunnies love nothing more than swapping pancakes. Especially on BSC.',\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/swapsies.png',\r\n    previewImage: 'swapsies-preview.png',\r\n    blurImage: 'swapsies-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 0,\r\n  },\r\n  {\r\n    name: 'Drizzle',\r\n    description: \"It's raining syrup on this bunny, but he doesn't seem to mind. Can you blame him?\",\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/drizzle.png',\r\n    previewImage: 'drizzle-preview.png',\r\n    blurImage: 'drizzle-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 1,\r\n  },\r\n  {\r\n    name: 'Blueberries',\r\n    description: \"These bunnies like their pancakes with blueberries. What's your favorite topping?\",\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/blueberries.png',\r\n    previewImage: 'blueberries-preview.png',\r\n    blurImage: 'blueberries-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 2,\r\n  },\r\n  {\r\n    name: 'Circular',\r\n    description: \"Love makes the world go 'round... but so do pancakes. And these bunnies know it.\",\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/circular.png',\r\n    previewImage: 'circular-preview.png',\r\n    blurImage: 'circular-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 3,\r\n  },\r\n  {\r\n    name: 'Sparkle',\r\n    description: 'It’s sparkling syrup, pancakes, and even lottery tickets! This bunny really loves it.',\r\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png',\r\n    previewImage: 'sparkle-preview.png',\r\n    blurImage: 'sparkle-blur.png',\r\n    sortOrder: 999,\r\n    bunnyId: 4,\r\n  },\r\n]\r\n\r\nexport default Nfts\r\n","import React, { useEffect, useRef } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button, Heading, Modal, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\r\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\r\nimport multicall from 'utils/multicall'\r\n\r\ninterface NftYouWonModalProps {\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  padding: 24px;\r\n  text-align: center;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  text-align: center;\r\n`\r\n\r\nconst NftYouWonModal: React.FC<NftYouWonModalProps> = ({ onDismiss }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <Modal title={TranslateString(999, 'Congratulations!')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <img src=\"/images/present.svg\" alt=\"You won present\" style={{ height: '64px', marginBottom: '24px' }} />\r\n        <Heading size=\"lg\" color=\"secondary\">\r\n          {TranslateString(999, 'You won an NFT!')}\r\n        </Heading>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button as=\"a\" href=\"/nft\">\r\n          {TranslateString(999, 'Go to claim NFT')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\n/**\r\n * 1. Checks if nft supply available\r\n * 2. If supply is available check if the user can claim\r\n * 3. If the user can claim show a modal\r\n */\r\nconst NftGlobalNotification = () => {\r\n  const { account } = useWallet()\r\n  const [onPresentBurnModal] = useModal(<NftYouWonModal />)\r\n  const showModal = useRef(() => onPresentBurnModal())\r\n\r\n  useEffect(() => {\r\n    const checkNftStatus = async () => {\r\n      const [totalSupplyDistributedArr, currentDistributedSupplyArr, canClaimArr, hasClaimedArr] = await multicall(\r\n        rabbitmintingfarm,\r\n        [\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\r\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\r\n        ],\r\n      )\r\n\r\n      // TODO: Figure out why these values are coming back as an array\r\n      const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\r\n      const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\r\n      const [canClaim]: [boolean] = canClaimArr\r\n      const [hasClaimed]: [boolean] = hasClaimedArr\r\n\r\n      if (currentDistributedSupply.lt(totalSupplyDistributed) && canClaim && !hasClaimed) {\r\n        showModal.current()\r\n      }\r\n    }\r\n\r\n    if (account && !document.location.href.includes('/nft')) {\r\n      checkNftStatus()\r\n    }\r\n  }, [account, showModal])\r\n\r\n  return <div />\r\n}\r\n\r\nexport default NftGlobalNotification\r\n","import React, { useEffect, Suspense, lazy } from 'react'\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport GlobalStyle from './style/Global'\r\nimport Menu from './components/Menu'\r\nimport PageLoader from './components/PageLoader'\r\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\r\n\r\n// Route-based code splitting\r\n// Only pool is included in the main bundle because of it's the most visited page'\r\nconst Home = lazy(() => import('./views/Home'))\r\nconst Farms = lazy(() => import('./views/Farms'))\r\nconst Lottery = lazy(() => import('./views/Lottery'))\r\n// const Pools = lazy(() => import('./views/Pools'))\r\nconst Ifos = lazy(() => import('./views/Ifos'))\r\nconst NotFound = lazy(() => import('./views/NotFound'))\r\n// const Nft = lazy(() => import('./views/Nft'))\r\n\r\n// This config is required for number formating\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst App: React.FC = () => {\r\n  const { account, connect } = useWallet()\r\n  useEffect(() => {\r\n    if (!account && window.localStorage.getItem('accountStatus')) {\r\n      connect('injected')\r\n    }\r\n  }, [account, connect])\r\n\r\n  useFetchPublicData()\r\n\r\n  return (\r\n    <Router>\r\n      <ResetCSS />\r\n      <GlobalStyle />\r\n      <Menu>\r\n        <Suspense fallback={<PageLoader />}>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/farms\">\r\n              <Farms />\r\n            </Route>\r\n            <Route path=\"/pools\">\r\n              <Farms tokenMode/>\r\n            </Route>\r\n            {/* <Route path=\"/pools\"> */}\r\n            {/*  <Pools /> */}\r\n            {/* </Route> */}\r\n            <Route path=\"/presale\">\r\n             <Ifos />\r\n            </Route>\r\n            <Route path=\"/lottery\"> \r\n              <Lottery />\r\n            </Route> \r\n            {/* <Route path=\"/nft\"> */}\r\n            {/*  <Nft /> */}\r\n            {/* </Route> */}\r\n            {/* Redirect */}\r\n            {/* <Route path=\"/staking\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* <Route path=\"/syrup\"> */}\r\n            {/*  <Redirect to=\"/pools\" /> */}\r\n            {/* </Route> */}\r\n            {/* 404 */}\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </Suspense>\r\n      </Menu>\r\n      <NftGlobalNotification />\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default React.memo(App)\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport farmsReducer from './farms'\r\nimport poolsReducer from './pools'\r\n\r\nexport default configureStore({\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n  reducer: {\r\n    farms: farmsReducer,\r\n    pools: poolsReducer,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\r\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\r\nimport * as bsc from '@binance-chain/bsc-use-wallet'\r\nimport { Provider } from 'react-redux'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\r\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\r\nimport { BlockContextProvider } from 'contexts/BlockContext'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport store from 'state'\r\n\r\nconst Providers: React.FC = ({ children }) => {\r\n  const rpcUrl = getRpcUrl()\r\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\r\n  return (\r\n    <Provider store={store}>\r\n      <ThemeContextProvider>\r\n        <LanguageContextProvider>\r\n          <bsc.UseWalletProvider\r\n            chainId={chainId}\r\n            connectors={{\r\n              walletconnect: { rpcUrl },\r\n              bsc,\r\n            }}\r\n          >\r\n            <BlockContextProvider>\r\n              <RefreshContextProvider>\r\n                <ModalProvider>{children}</ModalProvider>\r\n              </RefreshContextProvider>\r\n            </BlockContextProvider>\r\n          </bsc.UseWalletProvider>\r\n        </LanguageContextProvider>\r\n      </ThemeContextProvider>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default Providers\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport Providers from './Providers'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Providers>\r\n      <App />\r\n    </Providers>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n","import Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { ContractOptions } from 'web3-eth-contract'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using our own private provider httpProver\r\n */\r\nconst getWeb3 = () => {\r\n  const web3 = new Web3(httpProvider)\r\n  return web3\r\n}\r\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\r\n  const web3 = getWeb3()\r\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\r\n}\r\n\r\nexport { getWeb3, getContract, httpProvider }\r\n","import React, { createContext } from 'react'\r\n\r\nexport interface TranslationState {\r\n  translations: Array<any>\r\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\r\n}\r\n\r\nconst defaultTranslationState: TranslationState = {\r\n  translations: [],\r\n  setTranslations: (): void => undefined,\r\n}\r\n\r\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\r\n"],"sourceRoot":""}