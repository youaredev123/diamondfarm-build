{"version":3,"sources":["utils/formatBalance.ts","components/Input/Input.tsx","hooks/useApprove.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","hooks/useHarvest.ts","components/Input/index.ts","config/index.ts","components/layout/Flex.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["getBalanceNumber","balance","decimals","displayBalance","BigNumber","dividedBy","pow","toNumber","getFullDisplayBalance","toFixed","StyledInputWrapper","styled","div","props","theme","colors","input","radii","default","spacing","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","useApprove","lpContract","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onApprove","useCallback","a","approve","tx","fetchFarmUserDataAsync","useLotteryApprove","cakeContract","useCake","lotteryContract","useLottery","useIfoApprove","tokenContract","spenderAddress","methods","ethers","constants","MaxUint256","send","from","StyledSpacer","size","Spacer","s","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","Wrapper","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","useHarvest","farmPid","onReward","harvest","txHash","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","TranslateString","useI18n","liquidityUrlPathParts","justifyContent","href","external","NoFeeTag","variant","outline","startIcon","Flex","MultiplierTag","Tag","CardHeading","multiplier","farmImage","risk","tokenSymbol","depositFee","alignItems","mb","src","alt","width","height","flexDirection","useStake","onStake","amount","stake","console","info","useUnstake","onUnstake","unstake","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","withdrawFeeBP","toLocaleString","times","toString","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","QuoteToken","KAWAII","handleChange","e","currentTarget","handleSelectMax","title","disabled","parseFloat","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","useModal","onPresentDeposit","onPresentWithdraw","marginLeft","mr","BalanceAndCompound","HarvestAction","earnings","rawEarningsBalance","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","getContract","handleApprove","error","textTransform","fontSize","pr","mt","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","split","toLowerCase","totalValue","lpTotalInQuoteToken","BNB","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","style","display","userData","withDrawFeeTime","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","index","setIndex","ToggleWrapper","checked","activeIndex","newIndex","as","Link","to","textSubtle","Farms","farmsProps","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","activeFarms","filter","stakedOnlyFarms","perseusOnlyFarms","startsWith","busdOnlyFarms","includes","bnbOnlyFarms","stakedBusdOnlyFarms","stakedBnbOnlyFarms","stakedDiamondOnlyFarms","farmsList","farmsToDisplay","cakeRewardPerYear","kawaiiPerBlock","poolWeight","cakeRewardPerMonth","comparedTo","Page","textAlign","exact","className"],"mappings":"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","file":"static/js/9.efbbce59.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { cond } from 'lodash'\r\n\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\r\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\r\n  return displayBalance.toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\r\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface InputProps {\r\n  endAdornment?: React.ReactNode\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  startAdornment?: React.ReactNode\r\n  value: string\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\r\n  return (\r\n    <StyledInputWrapper>\r\n      {!!startAdornment && startAdornment}\r\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\r\n      {!!endAdornment && endAdornment}\r\n    </StyledInputWrapper>\r\n  )\r\n}\r\n\r\nconst StyledInputWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.input};\r\n  border-radius: ${(props) => props.theme.radii.default};\r\n  display: flex;\r\n  height: 72px;\r\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledInput = styled.input`\r\n  width: 100%;\r\n  background: none;\r\n  border: 0;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-size: 18px;\r\n  flex: 1;\r\n  height: 56px;\r\n  margin: 0;\r\n  padding: 0;\r\n  outline: none;\r\n`\r\n\r\nexport default Input\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, sousChefContract, account)\r\n      dispatch(updateUserAllowance(sousId, account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport Spacer from '../Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    if (sousId === 0) {\r\n      await harvest(masterChefContract, 0, account)\r\n    } else if (isUsingBnb) {\r\n      await soushHarvestBnb(sousChefContract, account)\r\n    } else {\r\n      await soushHarvest(sousChefContract, account)\r\n    }\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n","export { default } from './Input'\r\nexport type { InputProps } from './Input'\r\n","import BigNumber from 'bignumber.js/bignumber'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nexport const CAKE_PER_BLOCK = new BigNumber(1)\r\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\r\nexport const BSC_BLOCK_TIME = 3\r\n\r\nexport const CAKE_POOL_PID = 1\r\n","import styled from 'styled-components'\r\n\r\nconst FlexLayout = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  & > * {\r\n    min-width: 280px;\r\n    max-width: 31.5%;\r\n    width: 100%;\r\n    margin: 0 8px;\r\n    margin-bottom: 32px;\r\n  }\r\n`\r\n\r\nexport default FlexLayout\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Address } from 'config/constants/types'\r\n\r\nexport interface ExpandableSectionProps {\r\n  isTokenOnly?: boolean\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  isTokenOnly,\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={\r\n          isTokenOnly ?\r\n            `https://dex.diamond.amblade.me/#/swap/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n            :\r\n            `https://dex.diamond.amblade.me/#/add/${liquidityUrlPathParts}`\r\n        }>\r\n          {lpLabel}\r\n        </StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\r\n\r\nconst NoFeeTag = () => (\r\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\r\n    No Fees\r\n  </Tag>\r\n)\r\n\r\nconst RiskTag = ({ risk }) => (\r\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\r\n    Risk {risk}\r\n  </Tag>\r\n)\r\n\r\nconst CoreTag = () => (\r\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\r\n    Core\r\n  </Tag>\r\n)\r\n\r\nconst CommunityTag = () => (\r\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\r\n    Community\r\n  </Tag>\r\n)\r\n\r\nconst BinanceTag = () => (\r\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\r\n    Binance\r\n  </Tag>\r\n)\r\n\r\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag, RiskTag, NoFeeTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  risk?: number\r\n  depositFee?: number\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  risk,\r\n  farmImage,\r\n  tokenSymbol,\r\n  depositFee,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {depositFee === 0 ? <NoFeeTag /> : null}\r\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\r\n          {/* <RiskTag risk={risk} /> */}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport const useSousStake = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        await stake(masterChefContract, 0, amount, account)\r\n      } else if (isUsingBnb) {\r\n        await sousStakeBnb(sousChefContract, amount, account)\r\n      } else {\r\n        await sousStake(sousChefContract, amount, account)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n    },\r\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n","import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  fetchFarmUserDataAsync,\r\n  updateUserStakedBalance,\r\n  updateUserBalance,\r\n  updateUserPendingReward,\r\n} from 'state/actions'\r\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSousChef } from './useContract'\r\n\r\nconst useUnstake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await unstake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\r\n\r\nexport const useSousUnstake = (sousId) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n  const sousChefContract = useSousChef(sousId)\r\n  const isOldSyrup = SYRUPIDS.includes(sousId)\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      if (sousId === 0) {\r\n        const txHash = await unstake(masterChefContract, 0, amount, account)\r\n        console.info(txHash)\r\n      } else if (isOldSyrup) {\r\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      } else {\r\n        const txHash = await sousUnstake(sousChefContract, amount, account)\r\n        console.info(txHash)\r\n      }\r\n      dispatch(updateUserStakedBalance(sousId, account))\r\n      dispatch(updateUserBalance(sousId, account))\r\n      dispatch(updateUserPendingReward(sousId, account))\r\n    },\r\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstake\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\nimport Input, { InputProps } from '../Input'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  depositFeeBP?: number\r\n  withdrawFeeBP?: number\r\n}\r\n\r\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0, withdrawFeeBP = 0 }) => {\r\n  const TranslateString = useI18n()\r\n  return (\r\n    <StyledTokenInput>\r\n      <StyledMaxText>\r\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\r\n      </StyledMaxText>\r\n      <Input\r\n        endAdornment={\r\n          <StyledTokenAdornmentWrapper>\r\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n            <StyledSpacer />\r\n            <div>\r\n              <Button size=\"sm\" onClick={onSelectMax}>\r\n                {TranslateString(452, 'Max')}\r\n              </Button>\r\n            </div>\r\n          </StyledTokenAdornmentWrapper>\r\n        }\r\n        onChange={onChange}\r\n        placeholder=\"0\"\r\n        value={value}\r\n      />\r\n      {\r\n        depositFeeBP > 0 ?\r\n          <StyledMaxText>\r\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\r\n          </StyledMaxText>\r\n          :\r\n          null\r\n      }\r\n\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TokenInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { QuoteToken } from 'config/constants/types'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  depositFeeBP?: number\r\n  withdrawFeeBP?: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0, withdrawFeeBP = 0}) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    if(tokenName === QuoteToken.KAWAII)\r\n      return getFullDisplayBalance(max)\r\n    return getFullDisplayBalance(max)\r\n  }, [max, tokenName])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        depositFeeBP={depositFeeBP}\r\n        withdrawFeeBP={withdrawFeeBP}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            if(parseFloat(val) > 0){\r\n              setPendingTx(true)\r\n              await onConfirm(val)\r\n              setPendingTx(false)\r\n              onDismiss()\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport TokenInput from 'components/TokenInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\r\n      <TokenInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            if(parseFloat(val) > 0){\r\n              setPendingTx(true)\r\n              await onConfirm(val)\r\n              setPendingTx(false)\r\n              onDismiss()\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  depositFeeBP?: number\r\n  withdrawFeeBP?: number\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP, withdrawFeeBP}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} withdrawFeeBP={withdrawFeeBP} />)\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button marginLeft='45px' onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport styled from 'styled-components'\r\nimport useStake from '../../../../hooks/useStake'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst BalanceAndCompound = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n`\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const { onStake } = useStake(pid)\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <BalanceAndCompound>\r\n        {pid === 5 ?\r\n          <Button\r\n            disabled={rawEarningsBalance === 0 || pendingTx}\r\n            size='sm'\r\n            variant='secondary'\r\n            marginBottom='15px'\r\n            onClick={async () => {\r\n              setPendingTx(true)\r\n              await onStake(rawEarningsBalance.toString())\r\n              setPendingTx(false)\r\n            }}\r\n          >\r\n            {TranslateString(999, 'Compound')}\r\n          </Button>\r\n          : null}\r\n        <Button\r\n          disabled={rawEarningsBalance === 0 || pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n        >\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </BalanceAndCompound>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  \r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly){\r\n      return getContract(ethereum as provider, tokenAddress);\r\n    }\r\n    return getContract(ethereum as provider, lpAddress);\r\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\r\n    ) : (\r\n      <Button mt=\"8px\"  disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(999, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n        DIAM\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\"  /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\nimport { Address } from 'config/constants/types'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(999, 'DIAM per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          999,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport { Address } from 'config/constants/types'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  quoteTokenAdresses?: Address\r\n  quoteTokenSymbol?: string\r\n  tokenAddresses: Address\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  quoteTokenSymbol,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  apy,\r\n}) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal\r\n      lpLabel={lpLabel}\r\n      quoteTokenAdresses={quoteTokenAdresses}\r\n      quoteTokenSymbol={quoteTokenSymbol}\r\n      tokenAddresses={tokenAddresses}\r\n      cakePrice={cakePrice}\r\n      apy={apy}\r\n    />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nlet withDrawFeeTime\r\n\r\nconst RainbowLight = keyframes`\r\n  0% {\r\n    background-position: 0% 50%;\r\n  }\r\n  50% {\r\n    background-position: 100% 50%;\r\n  }\r\n  100% {\r\n    background-position: 0% 50%;\r\n  }\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(45deg,\r\n  rgba(255, 0, 0, 1) 0%,\r\n  rgba(255, 154, 0, 1) 10%,\r\n  rgba(208, 222, 33, 1) 20%,\r\n  rgba(79, 220, 74, 1) 30%,\r\n  rgba(63, 218, 216, 1) 40%,\r\n  rgba(47, 201, 226, 1) 50%,\r\n  rgba(28, 127, 238, 1) 60%,\r\n  rgba(95, 21, 242, 1) 70%,\r\n  rgba(186, 12, 248, 1) 80%,\r\n  rgba(251, 7, 217, 1) 90%,\r\n  rgba(255, 0, 0, 1) 100%);\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n //  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLowerCase()\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.KAWAII) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 9 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol\r\n  const earnLabel = 'DIAM'\r\n  \r\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  })\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\r\n  \r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'DIAM' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        risk={risk}\r\n        depositFee={farm.depositFeeBP}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent='space-between' alignItems='center'>\r\n          <Text>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton\r\n                  lpLabel={lpLabel}\r\n                  quoteTokenAdresses={quoteTokenAdresses}\r\n                  quoteTokenSymbol={quoteTokenSymbol}\r\n                  tokenAddresses={tokenAddresses}\r\n                  cakePrice={cakePrice}\r\n                  apy={farm.apy}\r\n                />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent='space-between'>\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <Flex justifyContent='space-between'>\r\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\r\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\r\n      </Flex>\r\n\r\n      {(farm.userData !== undefined) && \r\n      (account) &&\r\n      (farm.withdrawFeeBP > 0 && Number(farm.userData.stakedBalance) > 0) &&\r\n      <Flex justifyContent='space-between'>\r\n        <Text bold style={{ fontSize: '12px' }}>{(farm.withdrawFeeBP / 100)}% unstaking fee until {Number(withDrawFeeTime)}</Text>\r\n      </Flex>\r\n      }\r\n\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          isTokenOnly={farm.isTokenOnly}\r\n          bscScanAddress={\r\n            farm.isTokenOnly ?\r\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n              :\r\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\r\n          }\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          quoteTokenAdresses={quoteTokenAdresses}\r\n          quoteTokenSymbol={quoteTokenSymbol}\r\n          tokenAddresses={tokenAddresses}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React, {useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\n\r\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly}) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  const [index, setIndex] = useState(0);\r\n  \r\n  const handleClick = (newIndex) => setIndex(newIndex);\r\n  return (\r\n    <Wrapper>\r\n      <ToggleWrapper>\r\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\r\n        <Text> {TranslateString(699, 'Staked only')}</Text>\r\n      </ToggleWrapper>\r\n      <ButtonMenu activeIndex={index} size=\"sm\" variant=\"subtle\" onClick={handleClick}>\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n        <Text>All</Text>\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/kawaii`}>\r\n        <Text>DIAM</Text>\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/busd`}>\r\n        <Text>BUSD</Text>\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/bnb`}>\r\n        <Text>BNB</Text>\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const {tokenMode} = farmsProps;\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stakedOnly, setStakedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const perseusOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.lpSymbol.startsWith(\"DIAM\"),\r\n  )\r\n\r\n  const busdOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.lpSymbol.includes(\"BUSD\") \r\n  )\r\n\r\n  const bnbOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.lpSymbol.includes(\"BNB\") \r\n  )\r\n\r\n  const stakedBusdOnlyFarms = busdOnlyFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n  const stakedBnbOnlyFarms = bnbOnlyFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n  const stakedDiamondOnlyFarms = perseusOnlyFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n  \r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n        //   return farm\r\n        // }\r\n        const cakeRewardPerBlock = new BigNumber(farm.kawaiiPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n        const cakeRewardPerMonth = cakeRewardPerYear.div(12)\r\n        let apy = cakePrice.times(cakeRewardPerYear);\r\n        if (farm.quoteTokenSymbol === QuoteToken.KAWAII) {\r\n          apy = cakePrice.times(cakeRewardPerMonth);\r\n        }\r\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = totalValue.times(bnbPrice);\r\n        }\r\n\r\n        if(totalValue.comparedTo(0) > 0){\r\n          apy = apy.div(totalValue);\r\n        }\r\n        else {\r\n          apy = new BigNumber(0);\r\n        }\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [bnbPrice, account, cakePrice, ethereum],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        { \r\n          tokenMode ?\r\n            TranslateString(10002, 'Stake tokens to earn EGG')\r\n            :\r\n          TranslateString(320, 'Stake LP tokens to earn EGG')\r\n        }\r\n      </Heading>\r\n      <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {TranslateString(10000, 'Deposit Fee will be used to buyback EGG')}\r\n      </Heading>\r\n      <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/>\r\n      <div>\r\n        <Divider />\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/kawaii`}>\r\n          {stakedOnly ? farmsList(stakedDiamondOnlyFarms, false) : farmsList(perseusOnlyFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/busd`}>\r\n            {stakedOnly ? farmsList(stakedBusdOnlyFarms, false) : farmsList(busdOnlyFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/bnb`}>\r\n            {stakedOnly ? farmsList(stakedBnbOnlyFarms, false) : farmsList(bnbOnlyFarms, false)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n      <div className=\"responsive-bottom-image\" >\r\n        <img src=\"/images/egg/8.png\" alt=\"illustration\" />\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}